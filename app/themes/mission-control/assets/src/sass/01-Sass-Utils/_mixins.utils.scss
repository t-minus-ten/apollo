////
/// Utility Mixins
/// @group Mixins
////

/// -------------
/// Dotted Border
///
/// @example
///   @include dotted-border(border-color, border-width, direction);
///
/// @param {color} $border-color ['#000000']
/// @param {int} $border-width [2]
/// @param {string} $direction ['bottom']
/// -------------

@mixin dotted-border($border-color: '#000000', $border-width: 2, $direction: 'bottom') {
  $x2: 100%;
  $y2: 1;
  $viewbox: 0 0 24 2;
  $size: 'height="2"';

  @if ($direction == 'right' or $direction == 'left') {
    $x2: 1;
    $y2: 100%;
    $viewbox: 0 0 2 24;
    $size: 'width="2"';
  }

  border-style: dotted;
  border-image-source: svg-url(
    '<svg #{$size} viewBox="#{$viewbox}" xmlns="http://www.w3.org/2000/svg"><line x1="1" x2="#{$x2}" y1="1" y2="#{$y2}" stroke="#{$border-color}" stroke-width="2" stroke-linecap="round" stroke-dasharray=".001, 6" /></svg>'
  );
  border-image-repeat: round;
  border-color: $border-color;

  @if ($direction == 'top') {
    border-width: #{$border-width / 10}rem 0 0 0;
    border-image-slice: 100% 25%;
  } @else if ($direction == 'right') {
    border-width: 0 #{$border-width / 10}rem 0 0;
    border-image-slice: 25% 100%;
  } @else if ($direction == 'bottom') {
    border-width: 0 0 #{$border-width / 10}rem 0;
    border-image-slice: 100% 25%;
  } @else if ($direction == 'left') {
    border-width: 0 0 0 #{$border-width / 10}rem;
    border-image-slice: 25% 100%;
  }
}


/// --------------
/// Background SVG
///
/// @example
///   background-image: background-svg('<svg width="35px" height="9px" viewBox="0 0 35 9" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">...</svg>');
///
/// @param {string} $svg
/// --------------

@mixin background-svg($svg) {
  background-image: svg-url($svg);
}


/// -----------------------
/// Replace value in string
///
/// Helper function to replace characters in a string
///
/// @param $string
/// @param $search
/// @param $replace ['']
/// -----------------------
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @return if(
    $index,
    str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      ),
    $string
  );
}

/// -----------------
/// Poly Fluid Sizing
///
/// Generate linear interpolated size values through multiple break points
///
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
///
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
///
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// -----------------

@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: length(map-keys($map));

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error 'poly-fluid-sizing() $map requires at least values';
  }

  // Sort the map by viewport width (key)
  $map: map-sort($map);
  $keys: map-keys($map);

  // Minimum size
  #{$property}: map-get($map, nth($keys, 1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width: nth($keys, $i)) {
      #{$property}: linear-interpolation(
        (
          nth($keys, $i): map-get($map, nth($keys, $i)),
          nth($keys, ($i + 1)): map-get($map, nth($keys, ($i + 1))),
        )
      );
    }
  }

  // Maxmimum size
  @media (min-width: nth($keys, $length)) {
    #{$property}: map-get($map, nth($keys, $length));
  }
}

/// --------------------
/// Linear Interpolation
///
/// Calculate the definition of a line between two points
///
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
///
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
///
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// --------------------

@function linear-interpolation($map) {
  $keys: map-keys($map);

  @if (length($keys) != 2) {
    @error 'linear-interpolation() $map must be exactly 2 values';
  }

  // The slope
  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/ (nth(
          $keys,
          2
        ) - nth($keys, 1));

  // The y-intercept
  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

  // Determine if the sign should be positive or negative
  $sign: '+';

  @if ($b < 0) {
    $sign: '-';
    $b: abs($b);
  }

  @return calc(#{$m * 100}vw #{$sign} #{$b});
}

/// ---------
/// List Sort
///
/// Sort a SASS list
///
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
///
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// ---------

@function list-sort($list) {
  $sortedlist: ();

  @while length($list) > 0 {
    $value: nth($list, 1);

    @each $item in $list {
      @if $item < $value {
        $value: $item;
      }
    }

    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }

  @return $sortedlist;
}

/// --------
/// Map Sort
///
/// Sort map by keys
///
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
///
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// --------

@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();

  @each $key in $keys {
    $sortedMap: map-merge(
      $sortedMap,
      (
        $key: map-get($map, $key),
      )
    );
  }

  @return $sortedMap;
}

/// -----------
/// List Remove
///
/// Remove an item from a list
///
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
///
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// -----------

@function list-remove($list, $index) {
  $newList: ();

  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list, $i), 'space');
    }
  }

  @return $newList;
}


/// -----------
/// Background Image
///
/// Basic background image css
///
/// @param $pos [center] - Background-position value
/// -----------
@mixin bkg-img($pos: center) {
  background-position: $pos;
  background-repeat: no-repeat;
  background-size: cover;
}
